메서드
[m] 리턴타입 이름([매개변수]){
 기능 구현 문장
}

리턴타입:사용자 호출 메서드 결과 리턴
기본형변수 (8) + 참조형변수( 배열,클래스,인터페이스)
+ void

String m(){
 ....
 return "java";
}
void m(){
 ....
 ....;
}
생성자:new 키워드 jvm 사용
[m] 클래스이름([매개변수]){
 객체생성 시점 수행 필요 문장
}

static메서드
=클래스메서드(<--->객체메서드)
1개 저장 클래스영역 저장
클래스명.static메서드
(가능)
객제참조변수명.static메서드


메서드 overloading
하나의 클래스에 같은 이름의 메서드 여러개 정의
매개변수 순서나 타입이나 갯수 중 하나 이상 다르게 정의
같은 기능을 매개변수 따라서 여러개 사용 
Integer.parseInt("10")
Integer.parseInt("10", 8)


매개변수 전달
메서드나 생성자 정의 : 외부로부터 전달 데이터
===>같이 정의 필요 변수(형식매개변수)
메서드나 생성자 호출 : 실매개변수 전달

실매개변수의 값을 복사 형식매개변수 전달
:CALL BY VALUE
기본형 실제값 복사 전달된 이후에[
형식매개변수 변경되어도 실매개변수 X
참조형 주소값 복사 전달:같은 객체 공유
객체 내부 변수값 변경되면 영향받는다

~이다
class A{i, ma()}
class B extends A{i, ma() + j , mb()}

상속과 변수, 메서드
1.non-private 변수, 메서드 상속 사용가능
2.상속관계 두 클래스 동일명 변수, 메서드 존재
하위클래스 우선(super)
3.상속관계 두 클래스 static 동일명 변수, 메서드 존재
하위클래스 우선(클래스명.xxxx)

메서드 overriding
상속관계 두 클래스에 같은 이름의 메서드 존재
매개변수, 리턴타입 동일하고
modifier 같거나 더 넓을 수 있다

상위 메서드 내용을 하위 수정 필요

final메서드:오버라이딩금지
final클래스:상속금지(모든메서드오버라이딩금지)

abstract메서드:오버라이딩의무화
abstract클래스:객체생성불가능. 상속의무화

final abtract class ==>error
final abtract void m()===>error
final static int i = 10;===>ok


상속과 생성자
하위클래스 생성자 호출시에는
자동 상위클래스 생성자 호출
==> 생성자 내부 첫문장 자동 super() 


super 키워드
상위클래스 객체 의미 키워드

1.상,하위클래스 동일명 변수나 메서드 존재 : 상위 멤버 구분
super.변수명
super.메서드명()

2.생성자 첫문장!!! : 상위 생성자 호출
super():상위 기본생성자 호출. 자동 정의
super(매개변수):상위 사용자정의생성자 호출. 명시적 정의

형변환 필요 이유
a = b; ( b의 값을 a 로 복사 전달)
(a,b 타입 동일)
(a,b 타입 동일 x : b를 a와 같은 타입 변환)

(int) (char) / (A) (Employee)

기본형 변수 형변환 규칙
char byte short int long float double
1.boolean 제외
2.자동형변환:연산자생략
byte ->short-> int-> long-> float-> double
char->int-> long-> float-> double
3.명시적형변환:연산자생략불가능
double d = 3.14;
int i = (int)d;


객체의 형변환
1.상속관계 클래스

2.자동형변환:연산자생략
상위클래스명 변수명1 = new 하위클래스명():
(하위객체 생성하여 상위 변환 경우)

3.명시적형변환:연산자생략불가능
상위클래스명 변수명1 = new 하위클래스명():
하위클래스명 변수명2 = (하위클래스명)변수명1;
(자동형변환되었다가 다시 원래의 하위클래스 변환 경우)

class A/*extends Object*/{}
class B extends A{}
class C extends A{}
class D extends B{}

A a1 = new A();==>형변환필요

A a2 = new B();==>자동형변환가능
(Object, A, B)
A a3 = new C();==>자동형변환가능

A a4 = new D();==>자동형변환가능
(Object, A, B, D)

B b1 = new C();==>자동형변환오류(상속x)
(Object, A, C)
B b2 = new A();==>자동형변환오류(상위객체할당x)
(Object, A)

B b1 = (B)new C();==>명시적형변환오류(상속x)
B b2 = (B)new A();==>명시적형변환오류(상위객체할당x)


A a2 = new B();==>자동형변환가능
(Object, A, B)
a2.변수-->A
a2.메서드-->A
a2.오버라이딩메서드-->B

동일 타입의 데이터 모음 : 배열 : {A객체, B객체, C객체}
class Super{}
class A extends Super
class B extends Super
class C extends Super

Super i[] = new Super[3];
i[0] = new A();
i[1] = new B();
i[2] = new C();

B b2 = (B)a2;===>명시적형변환가능
b2.변수-->B
b2.메서드-->B


Object o1 = new 모든생성자();

자바모든 클래스들은 Object 하위클래스
하위클래스 객체들은 상위클래스 자동변환

0. 객체 타입 통일성(다른타입 객체 하나의 배열 저장 예)
1. 하위객체 자동 상위 변환
2. 상위 변수와 메서드 사용 원칙
   예외 오버라이딩메서드 하위클래스 사용
3. 하위 변수와 메서드 사용 : 명시적 형변환
4.  다시 원래의 하위객체 변환
  

객체지향언어 조건
1.캡슐화와 정보은닉 
2.클래스 단일상속, 인터페이스 다중상속
3.다형성 : 메서드 오버라이딩
           메서드 오버로딩
           생성자 오버로딩
           
8장 인터페이스
1. 형태특징 : public abstract 자동 정의 메서드
2.            생성자 없다
3. 	          static final public 자동 삽입 변수
4. 목적 :  다중상속 허용
5. implements 키워드
6. 반드시 인터페이스 상속 메서드 모두 구현 의무

           
학생 stu = new 학생();=>메서드구현부메모리할당불가능

interface 사람{
 잠자다();
}

interface 학생 extends 사람 {
	[public abstract 자동삽입] void 점심먹다();
	void 공부하다();
	void 잠자다();
	[static final public 자동삽입 ] 변수
}
interface  교직원{
	일하다();
	점심먹다();
} 
class 조교 implements 학생, 교직원{ //인터페이스다중상속
	점심먹다(){...}==>반드시 오버라이딩
	공부하다(){...}
	일하다(){...}
	잠자다(){...}
	+ 변수, 메서드, 생성자 추가
}

학생 a = new 조교();==>자동형변환
a.메서드==>조교
오버라이딩:학생 인터페이스 선언 메서드를
            조교 클래스 메서드 재구현
a.공부하다();
a.일하다();===>error
a.점심먹다();

교직원 a = new 조교();==>자동형변환
a.메서드==>조교
오버라이딩:교직원 인터페이스 선언 메서드를
            조교 클래스 메서드 재구현
a.공부하다();===>error
a.일하다();
a.점심먹다();


조교 a = new 조교();
a.공부하다();
a.일하다();
a.점심먹다();

상위클래스-하위클래스상속:단일상속. extends 
인터페이스-클래스 구현한다 :다중상속. implements
(구현하다)
인터페이스-인터페이스상속:다중상속. extends
(추가하다)


상위클래스-하위인터페이스상속:존재x

class A{
 ma(){
  구현부
 }
} 
interface I extends A{
 ma(){
  구현부
 }
}

6 클래스와 다형성(overloading)
7 클래스 단일상속과 다형성(overriding)
8 인터페이스(= 다중상속과 다형성)(overriding)
==> 캡슐화와 정보은닉/상속/다형성

객체지향구문 활용
9장 패키지
패키지(platform독립적(.)):(=폴더(windows:\)/
디렉토리(unix:/)) : 
유사한 성격의 클래스나 인터페이스 모임
클래스나 인터페이스 : *.class 파일 구조

패키지사용
java.lang.Object 자바 소스 사용 표현
java\lang\Object.class 파일 존재

c:\program files/java/jdk1.5.xx/jre\lib\rt.jar
 
패키지 장점
1. 관리용이
project\board\게시판구현 Read.class(게시판읽기)....
       \member\회원관리......Read.class(회원정보조회)
2.같은 이름의 충돌 회피
게시판읽기 project.board.Read
회원정보조회 project.member.Read
3. 접근 제어 단위 사용
private < (default) < protected < public

패키지 이용 키워드
import 패키지명.클래스
import 패키지명.*

package 생성-이용
jdk 설치 도스 실행 : 설정 복잡

이클립스 실행 : 메뉴 

edu.multi.test1 패키지 생성
A 클래스 생성

edu.multi.test2 패키지 생성
B 클래스 생성(main(){...A..} }


10장 예외처리
오류 : 프로그램 작성 - 실행 도중 발생 오동작. 중단
컴파일오류:syntax(구문)오류

int i = 3.14;
==> 수정하지 않으면 계속 발생

double i= 3.14; 또는 int i = (int)3.14;

실행오류 : 실행 조건에 따라 발생 특이한 사건
발생할 수도 있고 발생하지 않을 수도 있다
==> 예외(exception) 

객체지향언어 : 모든 예외상황 = 클래스 정의
api : XXXException 클래스들


사용자제어x:(전원off/네트워트다운/메모리부족)

1. 정수 0 으로 나누는 경우 오류
java.lang.ArithmeticException 발생

int i = Integer.parseInt(args[0]);
if(i != 0) int j = 100 / i;

args[0] "100" 입력==> 정상 수행 완료
args[0] '0" 입력===> 오류발생.중단

2. 배열 잘못된 인덱스 접근 경우 오류
java.lang.ArrayIndexOutOfBoundsException 발생

int i = Integer.parseInt(args[0]);
int arr[] = new int[100];
arr[i-1] = i;

args[0] "100" 입력==> 정상 수행 완료
args[0] '0" 입력===> 오류발생.중단

3.배열 잘못된 인덱스 접근 경우 오류
java.lang.ArrayIndexOutOfBoundsException 발생

int i = Integer.parseInt(args[0]);
==> 입력변수 x

4. 형변환 잘못
java.lang.ClassCastException

Object o = new Integer(100);
String s = (String)o;==> 

.....

class XXXXException extends Exception

예외처리개념
예외 발생하면 중단하지 않고 대신 다른 처리 수행하여
계속 완료 

예외처리구문
1.직접처리
try-catch
try{
 예외발생 가능성 문장 ;
 발생o: try x.catch 이동.수행
 발생x: try 수행.catch 수행x
 j = 100 /  i;
} 
catch(예외클래스명 변수명){
 발생o 처리문장(발생하지않도록)
 i = 100;
 
}
------------------------------
try{
 1;
}catch(AException e){
 3;
}catch(BException e){
 4;
}finally{
 2;==> 반드시 수행 필요 문장
 (예외발생유무, 예외타입, 예외처리유무 무관)
}  
5;
 1 문장 예외발생x: 1-2-5
         AException발생:3-2-5
         BException발생:4-2-5
         CException발생: 2
         (예외처리못한경우)
         
-------------------------------

try{
 예외발생가능성문장
}catch(예외클래스명 변수명){
 예외발생시 처리문장
}finally{
 반드시 수행문장
}

try(1)-catch(1~n)-finally(0~1)

13장 입출력
파일 입력 -windows-> 자바 사용 --> 결과 파일 출력

try{
 파일 열기(a.txt):windows 권한 획득
 파일 입력--예외발생---중단
 파일 닫기:windows 권한 반납.파일종료알려줌
}catch(IOException e){
 예외발생시 처리문장
}finally{
 파일 닫기:windows 권한 반납.파일종료알려줌
}

==> 파일이나 db(java.sql : jdbc ) 시스템자원
    사용 후 반납, 종료 문장 필요
 
 직접처리 : 예외발생문장을 포함하는 메서드내부 처리
    

2.간접처리 : 예외발생문장을 포함하는 메서드를 
호출하는 다른 메서드 내부 처리

throws

  void ma(int i){
  try{
  	System.out.println(100 / i);
  }catch(ArithmeticException e){x;}
 }
  void mb(){==> x+y
	  ma(0);
  }
  void mc(){==> x+z
	   ma(0);
  }
  
  

예외발생상황 예제

예외처리 예제

try-catch-finally-throws

-------------------------------------------
예외클래스생성
jdk 1.0 : 예외클래스 api  제공 몇개안되었다
jdk 1.5 : 예외클래스 api  모든 상황별 클래스
class A extends Exception{}

\\70.12.108.130\과제물제출\과제물4일차.txt

공유 완료된 후에는 공유창을 닫아주세요.

